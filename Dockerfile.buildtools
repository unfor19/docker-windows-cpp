# escape=`


# Use the latest Windows Server Core image with .NET Framework 4.8.
# :${DOTNET_SDK_VERSION}-20220215-windowsservercore-ltsc2019
FROM mcr.microsoft.com/dotnet/framework/sdk@sha256:f828494b61e4059d13f3733a899ab6a64a0160408d519721c79273a45bb0bda5

ENV BUILDING_INSIDE_DOCKER true

# Restore the default Windows shell for correct batch processing.
SHELL ["cmd", "/S", "/C"]
RUN nuget config

WORKDIR c:/
# Install chocolatey
RUN @"%SystemRoot%\System32\WindowsPowerShell\v1.0\powershell.exe" -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "[System.Net.ServicePointManager]::SecurityProtocol = 3072; iex ((New-Object System.Net.WebClient).DownloadString('https://community.chocolatey.org/install.ps1'))" `
    && SET "PATH=%PATH%;%ALLUSERSPROFILE%\chocolatey\bin"

# Install Visual Studio Build Tools with chocolatey
ARG VISUAL_STUDIO_BUILDTOOLS_VERSION="16.11.11.0"
ENV VISUAL_STUDIO_BUILDTOOLS_VERSION=${VISUAL_STUDIO_BUILDTOOLS_VERSION}
RUN `
    choco install -y --no-progress --limitoutput --version="%VISUAL_STUDIO_BUILDTOOLS_VERSION%" visualstudio2019buildtools `
    --install-args "--wait --norestart --nocache modify `
    --add Microsoft.VisualStudio.Component.VC.Llvm.Clang `
    --add Microsoft.VisualStudio.ComponentGroup.VC.Tools.142.x86.x64 `
    --add Microsoft.VisualStudio.Component.Windows10SDK.18362


# Install Visual Studio VC (C++) Tools with chocolatey
ARG VISUAL_STUDIO_VCTOOLS_VERSION="1.0.1"
ENV VISUAL_STUDIO_VCTOOLS_VERSION=${VISUAL_STUDIO_VCTOOLS_VERSION}
RUN choco install -y --no-progress --limitoutput --version="%VISUAL_STUDIO_VCTOOLS_VERSION%" visualstudio2019-workload-vctools --install-args "--wait --norestart --nocache modify"

# Install LLVM
ARG LLVM_VERSION="14.0.0"
ENV LLVM_VERSION=${LLVM_VERSION}
RUN choco install -y --no-progress --limitoutput llvm --version="%LLVM_VERSION%"


# Install Python
ARG PYTHON_VERSION="3.8.6"
ENV PYTHON_VERSION=${PYTHON_VERSION}
RUN choco install -y --no-progress --limitoutput python3 --version="%PYTHON_VERSION%" --params "/quiet /PrependPath=1 /InstallAllUsers=1"

# Install CMake
ARG CMAKE_VERSION="3.18.2"
ENV CMAKE_VERSION=${CMAKE_VERSION}
RUN choco install -y --no-progress --limitoutput cmake --version="%CMAKE_VERSION%" --install-args 'ADD_CMAKE_TO_PATH=System'

# Install Development Tools
RUN choco install -y --no-progress --limitoutput git vim powershell-core
RUN mklink "%ALLUSERSPROFILE%\chocolatey\bin\bash.exe" "C:\Program Files\Git\bin\bash.exe"


# Install Conan
ARG CONAN_VERSION="1.47.0"
ENV CONAN_VERSION=${CONAN_VERSION}
RUN pip install -U pip && `
    python -m pip install conan=="%CONAN_VERSION%"

# Enable Developer Mode
RUN reg add "HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\AppModelUnlock" /t REG_DWORD /f /v "AllowDevelopmentWithoutDevLicense" /d "1"

# Add VsDevCmd.bat to path, so it can be invoked from any dir
# https://renenyffenegger.ch/notes/Windows/dirs/Program-Files-x86/Microsoft-Visual-Studio/version/edition/Common7/Tools/VsDevCmd_bat 
RUN setx /m path "%path%;c:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\Common7\Tools"

LABEL `
    windows.buildtools.visualstudio2019buildtools_version="${VISUAL_STUDIO_BUILDTOOLS_VERSION}" `
    windows.buildtools.visualstudio2019vctools_version="${VISUAL_STUDIO_VCTOOLS_VERSION}" `
    windows.buildtools.cmake_version="${CMAKE_VERSION}" `
    windows.buildtools.llvm_version="${LLVM_VERSION}"

# Development mode - Sets all environment variables with VsDevCmd.bat on container runtime
ENTRYPOINT ["VsDevCmd.bat", "&&", "pwsh", "-NoLogo", "-ExecutionPolicy", "Bypass"]
